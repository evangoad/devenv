""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Evan Goad's vimrc
" Lots of stolen things from @mikeastock and @bobcats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
filetype off

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set rtp+=~/.fzf
call plug#begin('~/.vim/plugged')

" Utility
Plug 'tomtom/tcomment_vim'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-surround'
Plug 'rking/ag.vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'kana/vim-textobj-user'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'ingydotnet/yaml-vim'
Plug 'pbrisbin/vim-mkdir'
Plug 'Kazark/vim-SimpleSmoothScroll'
Plug 'christoomey/vim-run-interactive'
Plug 'skalnik/vim-vroom'
Plug 'benmills/vimux'

" Colors :)
Plug 'flazz/vim-colorschemes'
Plug 'znake/znake-vim'
Plug 'nanotech/jellybeans.vim'
Plug 'morhetz/gruvbox'
Plug 'whatyouhide/vim-gotham'
Plug 'sjl/badwolf'
Plug 'nowk/genericdc'
Plug 'jordwalke/flatlandia'
Plug 'effkay/argonaut.vim'
Plug 'chriskempson/base16-vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Mercurial
Plug 'ludovicchabant/vim-lawrencium'

" Ruby / Rails
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rbenv'
Plug 'vim-ruby/vim-ruby'
Plug 'thoughtbot/vim-rspec'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'ngmy/vim-rubocop'
Plug 'jgdavey/tslime.vim'

" Javascript
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'walm/jshint.vim'
Plug 'jQuery'

" Clojure
Plug 'guns/vim-clojure-static'

" Haskell
Plug 'dag/vim2hs'

" Go
Plug 'fatih/vim-go'

" Rust
Plug 'wting/rust.vim'
Plug 'cespare/vim-toml'

" Elixir
Plug 'elixir-lang/vim-elixir'

" AIRLINE
Plug 'bling/vim-airline'
Plug 'repeat.vim'
Plug 'file-line'


call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile {COMMIT_EDITMSG}                                         set ft=gitcommit
au BufRead,BufNewFile {Gemfile,Rakefile,Capfile,Guardfile,*.rake,config.ru}    set ft=ruby
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile hg-editor*.txt setlocal textwidth=80
filetype plugin indent on
set autoindent
set backspace=indent,eol,start
set background=dark
set encoding=utf-8
set expandtab
set foldenable
set foldlevel=100
set foldmethod=marker
set foldopen=block,hor,mark,percent,quickfix,tag
set formatoptions-=or
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchtime=5
set mouse=a
set nobackup
set noerrorbells
set noswapfile
set novisualbell
set nowrap
set nu
set ruler
set scroll=15
set shiftwidth=2
set showcmd
set showmatch
set smartcase
set smarttab
set softtabstop=2
set tabstop=2
set textwidth=0
set wildmenu
set wildmode=longest,list
syntax on

:let mapleader = " "

map <ScrollWheelUp> <C-U>
map <ScrollWheelDown> <C-D>

map <c-p> :FZF<CR>

" ctags stuff i don't understand
map <A-[> :tab split<CR>:exec("tag ".expand(<cword>))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand(<cword>))<CR>
" Start Interactive EasyAlign in visual mode
vmap <ENTER> <Plug>(EasyAlign)
" Start Interactive EasyAlign with a Vim movement
" nmap <leader>a <Plug>(EasyAlign)

let g:bufferline_echo = 0

" Fast saving
nmap <leader>w :w!<cr>

" Fast vim closing
nnoremap <leader>qq :q<cr>

" Switch back to previous file
nnoremap <leader><leader> <c-^>

" Window navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
imap <c-c> <esc>

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

" Contextual tab key
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"" Plugin Settings
let g:vimrubocop_keymap = 0
nmap <Leader>r :RuboCop<CR>

" Vroom settings
let g:vroom_detect_spec_helper = 1
let g:vroom_use_binstubs = 0
let g:vroom_cucumber_path = 'cucumber'
let g:vroom_use_vimux = 1
map <Leader>t :VroomRunTestFile<CR>
map <Leader>x :VroomCloseRunner<CR>

if !has('python')
  echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_files = 0

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

map <leader>gv :CtrlP app/views<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>ga :CtrlP app/assets<cr>
map <leader>gs :CtrlP app/services<cr>
map <leader>gt :CtrlP spec2/<cr>
map <leader>gx :CtrlP spec/<cr>
map <leader>gl :CtrlP lib<cr>
map <leader>gp :CtrlP config<cr>
map <leader>f5 :CtrlPClearCache<cr>:CtrlP<cr>

let g:CtrlMaxFiles=40000

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Airline settings

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

nmap <leader>h :bprev<CR>
nmap <leader>l :bnext<CR>
nmap <leader>b :b

" Fast buffer closing
nmap <leader>q :bp\|bd #<CR>

" Tslime
nmap <leader>tr <Plug>SetTmuxVars

" Clear Search Buffer
nmap <silent> ,/ :nohlsearch<CR>

" Colorcolumn from Jon
nmap <leader>uu :let &colorcolumn=join(range(81,999),",")<CR>
nmap <leader>uo :let &colorcolumn=join(range(999,999),",")<CR>
" let &colorcolumn=join(range(81,999),",")

" colorscheme
colorscheme hybrid


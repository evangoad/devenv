""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Evan Goad's vimrc
" Lots of stolen things from @mikeastock and @bobcats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
filetype off

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto-install Vim Plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs 
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Utility
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'rking/ag.vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'kana/vim-textobj-user'
Plug 'ingydotnet/yaml-vim'
Plug 'pbrisbin/vim-mkdir'
Plug 'Kazark/vim-SimpleSmoothScroll'
Plug 'christoomey/vim-run-interactive'
Plug 'benmills/vimux'
Plug 'junegunn/vim-easy-align'

" Mercurial
Plug 'ludovicchabant/vim-lawrencium'

" Javascript
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'jelera/vim-javascript-syntax'
Plug 'walm/jshint.vim'
Plug 'vim-scripts/jQuery'

" Elm
Plug 'elmcast/elm-vim'

" Clojure
Plug 'guns/vim-clojure-static'

" Haskell
Plug 'dag/vim2hs'

" Go
Plug 'fatih/vim-go'

" Rust
Plug 'wting/rust.vim'
Plug 'cespare/vim-toml'

" Elixir
Plug 'elixir-lang/vim-elixir'

" AIRLINE
Plug 'bling/vim-airline'
Plug 'tpope/repeat.vim'
Plug 'bogado/file-line'

" NERDTree
Plug 'scrooloose/nerdtree'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.md setlocal textwidth=80
au BufRead,BufNewFile hg-editor*.txt setlocal textwidth=80
filetype plugin indent on
set autoindent
set backspace=indent,eol,start
set background=dark
set encoding=utf-8
set expandtab
set foldenable
set foldlevel=100
set foldmethod=marker
set foldopen=block,hor,mark,percent,quickfix,tag
set formatoptions-=or
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchtime=5
set mouse=a
set nobackup
set noerrorbells
set noswapfile
set novisualbell
set nowrap
set nu
set ruler
set scroll=15
set shiftwidth=2
set showcmd
set showmatch
set smartcase
set smarttab
set softtabstop=2
set tabstop=2
set textwidth=0
set wildmenu
set wildmode=longest,list
syntax on

:let mapleader = " "

map <ScrollWheelUp> <C-U>
map <ScrollWheelDown> <C-D>

map <C-n> :NERDTreeToggle<CR>

" ctags stuff i don't understand
map <A-[> :tab split<CR>:exec("tag ".expand(<cword>))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand(<cword>))<CR>

" Easy Align
"Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:bufferline_echo = 0

" Fast saving
nmap <leader>w :w!<cr>

" Fast vim closing
nnoremap <leader>qq :q<cr>

" Switch back to previous file
nnoremap <leader><leader> <c-^>

" Window navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
imap <c-c> <esc>

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

" Contextual tab key
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

if !has('python')
  echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_files = 0
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:CtrlMaxFiles=40000
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" Airline settings

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

nmap <leader>h :bprev<CR>
nmap <leader>l :bnext<CR>
nmap <leader>b :b

" Fast buffer closing
nmap <leader>q :bp\|bd #<CR>

" Tslime
nmap <leader>tr <Plug>SetTmuxVars

source ~/.vim/fzf.vim
source ~/.vim/typescript.vim
source ~/.vim/ruby.vim
source ~/.vim/color.vim
source ~/.vim/git.vim
